#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

# Print the IP address
_IP=$(hostname -I) || true
if [ "$_IP" ]; then
  printf "My IP address is %s\n" "$_IP"
fi

if [ -e /opt/reboot-scheduled ]; then
    echo "detected previous reboot-scheduled file - removing it to prevent reboot-loop issues"
    rm -f /opt/reboot-scheduled
fi

# allow dropping a file hook:
# /opt/first_time_install.sh
# to trigger package updates
if [ -e /opt/first_time_install.sh ]; then
    if [ -e /var/log/sdinstall.log ]; then
        echo "" >> /var/log/sdinstall.log
        echo "" >> /var/log/sdinstall.log
        echo "--------------------------" >> /var/log/sdinstall.log
        echo "starting up $(date +"%Y-%m-%d %H:%M:%S")" >> /var/log/sdinstall.log
    fi
    echo "blocking package installer: /opt/first_time_install.sh"
    chmod 777 /opt/first_time_install.sh
    /opt/first_time_install.sh >> /var/log/sdinstall.log 2>&1
    rm -f /opt/first_time_install.sh
    if [ -e /opt/reboot-scheduled ]; then
        echo "detected reboot for first time installer in /etc/rc.local - removing file and rebooting" >> /var/log/sdinstall.log 2>&1
        rm -f /opt/reboot-scheduled
        sleep 1
        reboot
    fi
fi

# allow dropping a file hook:
# /opt/run_updater.sh
# to trigger package updates
if [ -e /opt/run_updater.sh ]; then
    if [ -e /var/log/sdupdate.log ]; then
        echo "" >> /var/log/sdupdate.log
        echo "" >> /var/log/sdupdate.log
        echo "--------------------------" >> /var/log/sdupdate.log
        echo "starting up $(date +"%Y-%m-%d %H:%M:%S")" >> /var/log/sdupdate.log
    fi
    echo "blocking run updater: /opt/run_updater.sh"
    chmod 777 /opt/run_updater.sh
    /opt/run_updater.sh >> /var/log/sdupdate.log 2>&1
    rm -f /opt/run_updater.sh
    if [ -e /opt/reboot-scheduled ]; then
        echo "detected reboot for updater in /etc/rc.local - removing file and rebooting" >> /var/log/sdupdate.log 2>&1
        rm -f /opt/reboot-scheduled
        sleep 1
        reboot
    fi
fi

if [ -e /opt/login_to_docker.sh ]; then
    echo "sleeping before trying to login to the docker registry"
    date +"%Y-%m-%d %H:%M:%S"
    sleep 10
    echo "done sleeping - trying to login to the registry"
    date +"%Y-%m-%d %H:%M:%S"
    /opt/login_to_docker.sh
    EXITVALUE=$?
fi

exit 0
